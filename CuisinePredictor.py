# -*- coding: utf-8 -*-
"""CuisinePredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Ii5PFaWO0wsSYFxvYnKRBu6IrECBOiS
"""

import pandas as pd
import random
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

# Load the data
train_data = pd.read_json('/content/drive/MyDrive/train.json')

# Drop the least popular 5 cuisines
cuisine_counts = train_data['cuisine'].value_counts()
least_popular = cuisine_counts[-5:].index.tolist()
least_popular.append('cajun_creole')
least_popular.append('spanish')
least_popular.append('vietnamese')
train_data = train_data[~train_data['cuisine'].isin(least_popular)]

# Preprocess: Combine ingredients into a single string
train_data['ingredients'] = train_data['ingredients'].apply(lambda x: ' '.join(x))

# Label Encoding for cuisine
le = LabelEncoder()
train_data['cuisine'] = le.fit_transform(train_data['cuisine'])

# Splitting the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    train_data['ingredients'],
    train_data['cuisine'],
    test_size=0.2,
    random_state=42
)

# Pipeline: TF-IDF and Random Forest Classifier
pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(stop_words='english')),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Train the model
pipeline.fit(X_train, y_train)

# Predict on the test data
predictions = pipeline.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Testing on test.json now

# Load test data
test_data = pd.read_json('/content/drive/MyDrive/test.json')

# Preprocess test data by combining ingredients into a single string
test_data['ingredients'] = test_data['ingredients'].apply(lambda x: ' '.join(x))

# Select a random ingredients list from test_data
random_index = random.randint(0, 1000)
random_ingredients = test_data.iloc[random_index]['ingredients']

# # Predict the cuisine for the randomly selected ingredients list
# predicted_cuisine_index = pipeline.predict([random_ingredients])[0]
# predicted_cuisine = le.inverse_transform([predicted_cuisine_index])[0]

# print(f"Random Ingredients List: {random_ingredients}")
# print(f"Predicted Cuisine: {predicted_cuisine}")

# Get probabilities of all classes
probabilities = pipeline.predict_proba([random_ingredients])[0]

# Get top 3 indices of highest probabilities
top_indices = np.argsort(probabilities)[-3:][::-1]  # This reverses the order to get highest first

# Decode indices to get corresponding cuisines
top_cuisines = le.inverse_transform(top_indices)

# Print results
print(f"Random Ingredients List: {random_ingredients}")
print("Top 3 Predicted Cuisines:")
for i, cuisine in enumerate(top_cuisines, 1):
    print(f"{i}: {cuisine} (Most appropriate: {probabilities[top_indices[i-1]] * 100:.2f}%)")

!pip install -q -U google-generativeai

import os
import google.generativeai as genai

os.environ['API_KEY'] = #Enter valid api key.
genai.configure(api_key=os.environ["API_KEY"])
# Initialize the LLM Gemini Model
model = genai.GenerativeModel("gemini-1.5-flash")

ingredients = random_ingredients
cuisine=input("Enter preferable cuisine: ")
allergens=input("Enter allergens from the ingredient: ").split()
# Define your custom prompt
prompt = (
    f"You are an expert chef specialized in {cuisine} cuisine. I will give you a list of ingredients separated by a space, "
    f"along with a list of allergens. Your task is to create a recipe using all or most of these ingredients. "
    f"If an ingredient might cause an allergic reaction, please provide a suitable substitute and mention it in the ingredient list. "
    f"If an ingredient is shown as None, ignore it. Give the recipe a catchy title, specify an approximate time to complete, "
    f"and state how many people it serves. Like any good recipe, list the ingredients with portions in the section labelled 'Ingredients:', "
    f"and provide the preparation steps in a numbered list under the section labelled 'Instructions:'. "
    f"Here's the list of ingredients: {ingredients}; and allergens to avoid: {allergens}."
)

response = model.generate_content(prompt)
print(response.text)
